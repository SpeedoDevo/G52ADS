
/*  ************* DO NOT EDIT THIS FILE !!!! *****************
*/
/** DRAFT might have minor changes.

 Interface for simple cut-down version of a Heap that just stores NON-NEGATIVE int keys.
 
 Note that all keys must satisfy k>=0.  Attempts to store negative keys should be treated as an errors. 
 Such errors should return in the normal way rather than throwing an exception; i.e. return with an error code value.

 The point of these is simply so that the same test scripts can be used for checking the basic functionality.
 Hence, do not change this file, because then this will break the scripts that may be run on your submitted code,
 and so you will lose marks.
 
 NOTE: for simplicity instead of storing a (key,value) pair, only the key is stored.
 
 NOTE that multiple copies of the same key can be stored.
 
 TODO:
 

 TODO:  implement using inbuilt PG
 TODO 1:  Complete the binary heap implementation Heap2 - and verify correctness
  
 Provide a simple implementation using the inbuilt Java library
 
 Provide a simple implementation using an array and binary heap

 Provide a test suite to 

   - check correctness

   - implement heapsort, and use it to do a timing test

  Provide a skeleton for binary heap 
   
  TASKS

  Part B.  Implement a 3-heap  Heap3 - and verify correctness
  Part C.  Implement a 4-heap  Heap4 - and verify correctness

  Part D.  Use the heapsort test script to do timing experiments compare speeds of the various options Heap2 and Heap3
            Produce a core graph.

	Part E: General analysis and discussion.
  
 */ 
public interface PQ_IntFace {
	
	/** returns the number of keys currently stored
	*/
	public int size();

	/** returns whether any keys are currently stored
	*/
	public boolean isEmpty();


	/* Used for 
	     initialisation -- the starting capacity should be zero
		 enlarging or shrinking the storage when needed
	
	   returns 
	   0 success
	   -1 rejected as newCapacity is too small to store the current items
	   -2 fails because ran out of memory
	   -3 fails for some other reason
	*/
	public int setCapacity(int newCapacity);
	
	/** Adds the integer k >=0 to the storage.
	Returns true if it was actively added -- meaning k>= 0 and was not contained -- increases the size by one.
	Returns:
	   0  if all worked fine
	   -1 if k<0, and so nothing needed to be done.
	   -2 if the array was full
	*/ 
	public int insert(int k);

	/** If the PQ is non-empty then removes the minimum and returns it.
	    If empty, then it just returns -1 - to save messing with exceptions!
	*/ 
	public int removeMin();
	
	/** If the PQ is non-empty then revturns the minimum, but the heap is not changed
	    If empty, then it just returns -1 - to save messing with exceptions!
	*/ 
	public int viewMin();
	
	// internal workings exposed for testing of the implementations by an external script
	public int[] getHeapArrayRef();
	public int   getLastIndex();
	
}
